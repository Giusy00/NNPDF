#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import print_function
""" A postfit script which collects good replicas in a LHAPDF grid"""

__authors__ = 'Stefano Carrazza, et at.'
__license__ = 'GPL'
__version__ = '1.0.0'
__email__ = 'stefano.carrazza@mi.infn.it'

import os
import shutil
import sys
import argparse
import math
from subprocess import PIPE, Popen
import logging

log = logging.Logger('__name__', logging.INFO)

def main(nrep, fit_filename):

    fitname = fit_filename.replace(".yml","")
    dir     = "../results/" + fitname + "/revolvenet/"
    logpath  = dir + "revolvenet.log"

    log.addHandler(logging.FileHandler(logpath))
    log.addHandler(logging.StreamHandler(stream=sys.stdout))

    mask = []
    umask = []
    discart = []

    # check the total number of replicas
    im = 1
    while True:
        folder = dir + "replica_" + str(im) + "/"
        if os.path.exists(folder) == False and im <= nrep:
            log.error("Please check the total number of replicas!")
            exit(-1)
        if os.path.exists(folder) == True:
            mask.append(dir + "replica_" + str(im) + "/")
        else:
            break
        im += 1

    totalrep = len(mask)
    log.info (" - There are %d replicas." % totalrep)
    log.info ("\n- All replicas tested and verified, building LHgrid with replicas from folders:")

    for i in range(len(mask)):
        if i < nrep:
            log.info ("%s" % mask[i].replace(dir + "replica_","")),

    ####################################
    # building LHAPDF6 grids
    ####################################
    headerfile6 = open(dir + fitname + ".info",'r')
    shutil.rmtree(dir + fitname + '_revolvenet',  ignore_errors=True)
    os.makedirs(dir + fitname + '_revolvenet')
    output6    = open(dir + fitname + '_revolvenet/' + fitname + "_revolvenet.info",'w')

    log.info ("\n\n- Building header LHAPDF6 ...\n")
    line = headerfile6.readline()
    while line:
        line = line.replace("REPLACE_NREP",str(nrep+1))

        # print the update content to the output file
        output6.write(line)
        line = headerfile6.readline()

    headerfile6.close()
    output6.close()

    ## Preparing replicas
    xpdf = []
    xgrid = []
    qgrid = []
    fgrid = []
    # copy replica files
    for i in range(1,nrep+1):
        replica = dir + 'replica_' + str(i) + "/" + fitname + ".dat"
        shutil.copyfile(replica, dir + "/" + fitname + '_revolvenet/' + fitname + '_revolvenet_{:04n}.dat'.format(i))

        log.info("Reading: %s" % replica)
        f = open(replica, 'r')
        xpdf.append([])
        for j in range(0,2): f.readline()

        s = 0
        while True:
            f.readline()
            xs = f.readline()
            qs = f.readline()
            fs = f.readline()

            nx  = len(xs.split())
            nq  = len(qs.split())
            nfl = len(fs.split())

            if nx == 0: break

            xpdf[i-1].append([])

            if i == 1:
                xgrid.append(xs)
                qgrid.append(qs)
                fgrid.append(fs)

            for ix in range(nx):
                xpdf[i-1][s].append([])
                for iq in range(nq):
                    xpdf[i-1][s][ix].append([])
                    line = f.readline().split()
                    for ifl in range(nfl):
                        xpdf[i-1][s][ix][iq].append(float(line[ifl]))
            s+=1
        f.close()

    log.info("Computing and priting replica 0")
    f = open(dir + "/" + fitname + "_revolvenet/" + fitname + "_revolvenet_0000.dat", 'w')
    f.write("PdfType: central\n")
    f.write("Format: lhagrid1\n---\n")

    for s in range(len(qgrid)):
        f.write(xgrid[s])
        f.write(qgrid[s])
        f.write(fgrid[s])
        for ix in range(len(xgrid[s].split())):
            for iq in range(len(qgrid[s].split())):
                f.write(" ")
                for ifl in range(len(fgrid[s].split())):
                    sum = 0
                    for irep in range(nrep):
                        sum += xpdf[irep][s][ix][iq][ifl]
                    sum /= nrep
                    f.write("%14.7E " % sum)
                f.write("\n")
        f.write("---\n")
    f.close()

    log.info("\n- Finished see: \n%s" % output6)

    # Copy grid to LHAPATH
    log.info("\n- Copying %s to LHAPDF path" % fitname)
    lhapath = Popen(["lhapdf-config","--datadir"],stdout=PIPE).communicate()[0]
    lhapath = lhapath.decode()


    import lhapdf
    if hasattr(lhapdf,"mkPDFs"):
        log.info("LHAPATH: %s" % lhapath)

        src = dir + fitname + '_revolvenet'
        lhapath = lhapath.replace("\n","/")
        dst = lhapath + fitname + '_revolvenet'
        log.info ("- cp -r %s\n\t %s" % (src,dst))
        try:
            shutil.copytree(src,dst)
        except:
            log.error("Error: this grid already exists, please delete and run the script again")
            exit(-1)

        log.info("Testing LHgrid:")

        # Test LHAGRID
        pdf = lhapdf.mkPDFs(fitname + '_revolvenet')

        pdfs = ["xg","xd","xu","xs"]
        X = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 0.2, 0.3, 0.4, 0.5, .6, 0.7, 0.8, 0.9]
        Q = math.sqrt(pdf[0].q2Min)

        log.info("Total number of members: %d" % len(pdf))
        # test replica 0

        status = True
        for i in range(0,len(pdfs)):
            print ("\n         x\t        Q2          %s rep0          %s avg          Diff" % (pdfs[i], pdfs[i]))
            for j in range(0,len(X)):
                print (" %14.7e" % X[j], end='\t')
                print (" %14.7e" % float(Q*Q), end='\t')
                rep0 = pdf[0].xfxQ(i,X[j],Q)
                print (" %14.7e" % rep0, end='\t')
                sum = 0
                for irep in range(1,len(pdf)):
                    sum += pdf[irep].xfxQ(i,X[j],Q)
                sum /= nrep
                print (" %14.7e" % sum, end='\t')
                diff = (sum-rep0)/rep0*100
                if diff > 1e-4:
                    status = False
                print (" %14.7e" % diff)

    if status == True:
        print("\n- Congratulations! The grid was created and tested. Now you can run validphys!\n")
    else:
        print("\n- Unfortunately there is a problem in the grid.\n")


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('nrep', nargs='?', help="Number of desired replicas", type=int)
    parser.add_argument('fit_filename', nargs='?', help="Fit configuration filename")
    args = parser.parse_args()
    if not all((args.nrep, args.fit_filename)):
        parser.error("Too few arguments: nrep, fit_filename.")
    mainargs = vars(args)
    main(**mainargs)
