# -*- coding: utf-8 -*-
"""
Functions and Plots relating to Closure Test 
Statistical Estimators.
"""

import logging

import numpy as np
import matplotlib.pyplot as plt
from matplotlib import cm, colors as mcolors, ticker as mticker

from reportengine.figure import figure
from reportengine.checks import make_argcheck, CheckError
from reportengine import collect

from validphys.results import experiment_results, total_experiments_chi2data
from validphys import plotutils
from validphys.calcutils import calc_chi2


log = logging.getLogger(__name__)

@make_argcheck
def _check_use_fitcommondata(closures):
    for closure in closures:
        try:
            x = closure['use_fitcommondata']
        except:
            raise CheckError("use_fitcommondata should be specified True "
                             "in `closures` when performing studies on closure "
                             "tests.")
        if not closure['use_fitcommondata']:
            raise CheckError("use_fitcommondata should be True "
                             "when performing studies on closure "
                             "tests.")

@_check_use_fitcommondata
@figure
def plot_delta_chi2(delta_chi2_bootstrap, closures_speclabel):
    """Plots distributions of delta chi2 for each specification in
    `closures`. Distribution is generated by bootstrapping. For
    more information on delta chi2 see `delta_chi2_bootstrap`
    """
    delta_chi2 = delta_chi2_bootstrap.T
    labels=closures_speclabel
    fig, ax = plt.subplots()
    for i, label in enumerate(labels):
        ax.hist(delta_chi2[:, i], alpha=0.3, label=label, zorder=100)
    l = ax.legend()
    l.set_zorder(1000)
    return fig

@figure
def plot_biases(experiments, bias_experiments, closures_speclabel):
    """Plot the biases of all experiments with bars."""
    biases = np.array(bias_experiments).T
    labels = closures_speclabel
    xticks = [experiment.name for experiment in experiments]
    fig, ax = plotutils.barplot(biases, collabels=xticks, datalabels=labels)
    ax.set_title("biases for experiments")
    ax.legend()
    return fig

def bias_experiment(exp_result_closure,
                    exp_result_t0):
    """Calculates the bias for all closure fit specified in runcard for
    one experiment. The bias is the chi2 between the level zero closure
    replica and the level zero of the PDF used to generate the data.
    The underlying law is taken to be the same as the PDF used to generate
    the t0 covariance matrix
    """
    bias_out = np.zeros(len(exp_result_closure))
    for i, (ct, ul) in enumerate(zip(exp_result_closure,
                                       exp_result_t0)):
        ((dt_ct, th_ct), (_, th_ul)) = ct, ul
        central_diff = th_ct.central_value - th_ul.central_value
        bias_out[i] = calc_chi2(dt_ct.sqrtcovmat, central_diff)/len(dt_ct)
    return bias_out

def delta_chi2_bootstrap(fakepdf_chi2_pseudodata, 
                         closures_experiments_bootstrap_chi2_central):
    """Bootstraps deltachi2 for specified closures, details on how delta
    chi2 is calculated can be found in 1410.8849 eq (28).
    """
    closure_total_chi2_boot = np.sum(closures_experiments_bootstrap_chi2_central, axis=1)
    fakepdf_pseudodata_chi2 = np.array([fpdf.central_result for fpdf in fakepdf_chi2_pseudodata])
    deltachi2boot = (closure_total_chi2_boot - 
             fakepdf_pseudodata_chi2[:, np.newaxis])/fakepdf_pseudodata_chi2[:, np.newaxis]
    return deltachi2boot


#Closure test collect functions

closures_speclabel = collect('speclabel', ('closures',), element_default=None)

exp_result_closure = collect(experiment_results, ('closures',))
exp_result_t0 = collect(experiment_results, ('closures', 'fitunderlyinglaw',))

closures_experiments_bootstrap_chi2_central = collect('experiments_bootstrap_chi2_central',
                                                      ('closures',))
fakepdf_chi2_pseudodata = collect(total_experiments_chi2data, ('closures', 'fakepdf'))
